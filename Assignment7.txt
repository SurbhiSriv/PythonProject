1) Read a text file and return the no of spaces.

Solution

def count_spaces_in_file(file_path):
    """
    Count the number of spaces in a text file.

    :param file_path: Path to the text file
    :return: Number of spaces in the file
    """
    try:
        with open(file_path, 'r') as file:
            content = file.read()
            space_count = content.count(' ')
            return space_count
    except FileNotFoundError:
        print(f"The file {file_path} was not found.")
        return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Example usage
if __name__ == "__main__":
    # Replace 'your_file.txt' with the path to your text file
    file_path = 'your_file.txt'
    spaces = count_spaces_in_file(file_path)
    
    if spaces is not None:
        print(f"Number of spaces in '{file_path}': {spaces}")




2) Read a text file and replace all the vowels with capital.

Solution

def replace_vowels_with_capitals(file_path):
    """
    Read a text file and replace all vowels with capital letters.

    :param file_path: Path to the text file
    :return: None
    """
    try:
        # Read the content of the file
        with open(file_path, 'r') as file:
            content = file.read()

        # Replace vowels with uppercase
        vowels = "aeiou"
        replaced_content = ''.join(char.upper() if char.lower() in vowels else char for char in content)

        # Write the modified content back to the file or print it
        with open(file_path, 'w') as file:
            file.write(replaced_content)

        print("Vowels have been replaced with capitals.")

    except FileNotFoundError:
        print(f"The file {file_path} was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage
if __name__ == "__main__":
    # Replace 'your_file.txt' with the path to your text file
    file_path = 'your_file.txt'
    replace_vowels_with_capitals(file_path)





3) Display the files in a directory

Solution
import os

def display_files_in_directory(directory_path):
    """
    Display the files in the specified directory.

    :param directory_path: Path to the directory
    """
    try:
        # List all files and directories in the specified directory
        items = os.listdir(directory_path)

        # Filter out the files
        files = [item for item in items if os.path.isfile(os.path.join(directory_path, item))]

        # Check if there are any files to display
        if files:
            print("Files in the directory:")
            for file in files:
                print(file)
        else:
            print("No files found in the directory.")

    except FileNotFoundError:
        print(f"The directory {directory_path} was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage
if __name__ == "__main__":
    # Replace 'your_directory_path' with the path to the directory you want to check
    directory_path = 'your_directory_path'
    display_files_in_directory(directory_path)


4) Get File Creation and Modification DateTime of a file

Solution

import os
import time

def get_file_dates(file_path):
    """
    Get the creation and modification dates of a specified file.

    :param file_path: Path to the file
    :return: Creation and modification dates
    """
    try:
        # Get the creation time
        creation_time = os.path.getctime(file_path)
        # Get the modification time
        modification_time = os.path.getmtime(file_path)

        # Convert timestamps to human-readable format
        creation_time_str = time.ctime(creation_time)
        modification_time_str = time.ctime(modification_time)

        return creation_time_str, modification_time_str

    except FileNotFoundError:
        print(f"The file '{file_path}' was not found.")
        return None, None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None, None

# Example usage
if __name__ == "__main__":
    # Replace 'your_file_path' with the path to the file you want to check
    file_path = 'your_file_path'
    
    creation_date, modification_date = get_file_dates(file_path)
    if creation_date and modification_date:
        print(f"File: {file_path}")
        print(f"Creation Date: {creation_date}")
        print(f"Modification Date: {modification_date}")







5) Use ‘ Person1.json’ and do the following:
A) Total number of json records in file
B) How many persons have blue eye
C) How many female and male are there
D) How many people work in company that is located in France
E) Display the name of the person, registered in following format
 Eg. Registered = '2015-02-11T04:22:39+0000'
Output = wed 11-feb-2015
