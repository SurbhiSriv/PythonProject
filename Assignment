Assignment 1

1. What is the output of the following code?
nums = set([1,1,2,3,3,3,4,4])
print(len(nums))

Solution
The length of the set {1, 2, 3, 4} is 4



2. What will be the output? d = {&quot;john&quot;:40, &quot;peter&quot;:45} print(list(d.keys()))

Solution
['john', 'peter']



3. A website requires a user to input username and password to register. Write a program to check
the validity of password given by user. Following are the criteria for checking password:
a) At least 1 letter between [a-z]
b) At least 1 number between [0-9]
c) At least 1 letter between [A-Z]
d) At least 1 character from [$#@]
e) Minimum length of transaction password: 6
f) Maximum length of transaction password: 12

Solution
import re

def check_password(password):
    # Check minimum and maximum length
    if len(password) < 6 or len(password) > 12:
        return "Password must be between 6 and 12 characters long."

    # Check for at least one letter between [a-z]
    if not re.search(r'[a-z]', password):
        return "Password must contain at least one lowercase letter [a-z]."

    # Check for at least one number between [0-9]
    if not re.search(r'[0-9]', password):
        return "Password must contain at least one digit [0-9]."

    # Check for at least one letter between [A-Z]
    if not re.search(r'[A-Z]', password):
        return "Password must contain at least one uppercase letter [A-Z]."

    # Check for at least one character from [$#@]
    if not re.search(r'[$#@]', password):
        return "Password must contain at least one special character [$#@]."

    return "Password is valid."

# Example usage
password = input("Enter your password: ")
print(check_password(password))


4. Write a for loop that prints all elements of a list and their position in the list.
a = [4,7,3,2,5,9]

Solution
a = [4, 7, 3, 2, 5, 9]

# Using enumerate to get both index and value
for index, value in enumerate(a):
    print(f"Position {index}: {value}")

5. Please write a program which accepts a string from console and print the characters that have
even indexes.
Example: If the following string is given as input to the program: H1e2l3l4o5w6o7r8l9d
Then, the output of the program should be: Helloworld

Solution

# Accept input from the user
input_string = input("Enter a string: ")

# Extract characters with even indexes
result = input_string[::2]

# Print the result
print(result)



6. Please write a program which accepts a string from console and print it in reverse order.
Example: If the following string is given as input to the program: rise to vote sir
Then, the output of the program should be: ris etov ot esir

Solution
# Accept input from the user
input_string = input("Enter a string: ")

# Reverse the string
reversed_string = input_string[::-1]

# Print the reversed string
print(reversed_string)



7. Please write a program which count and print the numbers of each character in a string input by
console.
Example: If the following string is given as input to the program: abcdefgabc
Then, the output of the program should be:
a,2
c,2
b,2
e,1
d,1
g,1
f,1

Solution
from collections import Counter

# Accept input from the user
input_string = input("Enter a string: ")

# Use Counter to count the occurrences of each character
char_count = Counter(input_string)

# Print the characters and their counts in the specified format
for char, count in char_count.items():
    print(f"{char},{count}")


8. With two given lists [1,3,6,78,35,55] and [12,24,35,24,88,120,155], write a program to make a list
whose elements are intersection of the above given lists.

Solution
# Given lists
list1 = [1, 3, 6, 78, 35, 55]
list2 = [12, 24, 35, 24, 88, 120, 155]

# Find the intersection using set operations
intersection = list(set(list1) & set(list2))

# Print the result
print(intersection)


9. With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after
removing all duplicate values with original order reserved.

Solution

def remove_duplicates(original_list):
    seen = set()        # To keep track of seen elements
    result = []         # To store the result with duplicates removed

    for item in original_list:
        if item not in seen:
            result.append(item)  # Add the item to result if not seen
            seen.add(item)       # Mark this item as seen

    return result

# Given list
original_list = [12, 24, 35, 24, 88, 120, 155, 88, 120, 155]

# Remove duplicates while preserving the order
cleaned_list = remove_duplicates(original_list)

# Print the cleaned list
print(cleaned_list)


10. By using list comprehension, please write a program to print the list after removing the value 24
in [12,24,35,24,88,120,155].

Solution
# Given list
original_list = [12, 24, 35, 24, 88, 120, 155]

# Create a new list excluding the value 24 using list comprehension
filtered_list = [x for x in original_list if x != 24]

# Print the filtered list
print(filtered_list)


11. By using list comprehension, please write a program to print the list after removing the
0th,4th,5th numbers in [12,24,35,70,88,120,155].

Solution

# Given list
original_list = [12, 24, 35, 70, 88, 120, 155]

# Indices to remove
indices_to_remove = {0, 4, 5}

# Create a new list excluding elements at the specified indices
filtered_list = [value for index, value in enumerate(original_list) if index not in indices_to_remove]

# Print the filtered list
print(filtered_list)


12. . By using list comprehension, please write a program to print the list after removing delete
numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].

Solution
# Given list
original_list = [12, 24, 35, 70, 88, 120, 155]

# Create a new list excluding elements divisible by both 5 and 7
filtered_list = [x for x in original_list if not (x % 5 == 0 and x % 7 == 0)]

# Print the filtered list
print(filtered_list)


13. Please write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7
, between 1 and 1000 inclusive.

Solution
import random

def generate_divisible_by_35(min_value, max_value, count):
    # List to store the numbers
    numbers = []

    # Generate numbers until we have the required count
    while len(numbers) < count:
        # Generate a random number within the range
        num = random.randint(min_value, max_value)
        
        # Check if the number is divisible by 35
        if num % 35 == 0:
            numbers.append(num)
    
    return numbers

# Generate a list of 5 random numbers divisible by 35 between 1 and 1000
random_numbers = generate_divisible_by_35(1, 1000, 5)

# Print the generated list
print(random_numbers)


14. Write a program to compute 1/2+2/3+3/4+...+n/n+1 with a given n input by console (n&gt;0).
Example: If the following n is given as input to the program: 5

Then, the output of the program should be: 3.55

Solution

# Accept input from the user
n = int(input("Enter a positive integer n: "))

# Ensure the input is greater than 0
if n <= 0:
    print("Please enter a positive integer greater than 0.")
else:
    # Compute the sum of the series
    total_sum = sum(i / (i + 1) for i in range(1, n + 1))
    
    # Print the result
    print(f"The sum of the series is: {total_sum:.2f}")
