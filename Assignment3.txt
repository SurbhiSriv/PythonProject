Assignment OOP  

Problem 1.  Write a Python program to create a class representing a stack data structure. Include
methods for pushing and popping elements.

Solution
Stack.py

stack = Stack()
stack.push(1)
stack.push(2)
stack.push(3)
stack.display()  # Output: Stack: [1, 2, 3]

stack.pop()      # Output: Popped 3 from the stack.
stack.display()  # Output: Stack: [1, 2]

stack.pop()      # Output: Popped 2 from the stack.
stack.pop()      # Output: Popped 1 from the stack.
stack.pop()      # Output: Stack is empty. Cannot pop.

problem 2. Write a Python program to create a class representing a linked list data structure. Include
methods for displaying linked list data, inserting and deleting nodes.

Solution
Node.py

ll = LinkedList()
ll.insert_at_beginning(10)
ll.insert_at_end(20)
ll.insert_at_end(30)
ll.display()  # Output: 10 -> 20 -> 30 -> None

ll.delete_node(20)
ll.display()  # Output: 10 -> 30 -> None

ll.delete_node(40)  # Output: Node with data 40 not found.
ll.display()  # Output: 10 -> 30 -> None

Problem 3.  Write a Python program to create a class representing a shopping cart. Include methods
for adding and removing items, and calculating the total price.

Solution 
ShoppingCart.py

cart = ShoppingCart()
cart.add_item("Apple", 3, 0.99)
cart.add_item("Banana", 2, 0.59)
cart.display_cart()  # Displays current items and total price

cart.add_item("Apple", 2, 0.99)
cart.display_cart()  # Updates the quantity of Apples

cart.remove_item("Banana", 1)
cart.display_cart()  # Removes one Banana

cart.remove_item("Banana", 1)
cart.display_cart()  # Removes remaining Banana

print(f"Total price: ${cart.calculate_total():.2f}")  # Displays the total price


Problem 4.  Write a Python program to create a class representing a stack data structure. Include
methods for pushing, popping and displaying elements.

Solution
Stacka.py

stack = Stack()
stack.push(10)
stack.push(20)
stack.push(30)
stack.display()  # Output: Stack elements: [10, 20, 30]

stack.pop()      # Output: Popped 30 from the stack.
stack.display()  # Output: Stack elements: [10, 20]

stack.pop()      # Output: Popped 20 from the stack.
stack.pop()      # Output: Popped 10 from the stack.
stack.display()  # Output: Stack is empty.

stack.pop()      # Output: Stack is empty. Cannot pop.





Assignment 3


Program 1. Write a Python program to create a lambda function that adds 15 to a given number
passed in as an argument, also create a lambda function that multiplies argument x with
argument y and prints the result.
Sample Output:
25
48

Solution 

# Lambda function that adds 15 to a given number
add_15 = lambda x: x + 15

# Lambda function that multiplies two arguments
multiply = lambda x, y: x * y

# Test the lambda functions with sample inputs
num_to_add = 10  # Example number to which we will add 15
result_add = add_15(num_to_add)
print(result_add)  # This should print 25

x, y = 6, 8  # Example numbers to multiply
result_multiply = multiply(x, y)
print(result_multiply)  # This should print 48



Problem 2. Write a Python program to create a function that takes one argument, and that argument
will be multiplied with an unknown given number.
Sample Output:
Double the number of 15 = 30
Triple the number of 15 = 45
Quadruple the number of 15 = 60
Quintuple the number 15 = 75

Solution
def multiply_with_unknown(number, multiplier):
    return number * multiplier

# Define the number to be used
number = 15

# Define the multipliers
multipliers = {
    "Double": 2,
    "Triple": 3,
    "Quadruple": 4,
    "Quintuple": 5
}

# Print the results for each multiplier
for description, multiplier in multipliers.items():
    result = multiply_with_unknown(number, multiplier)
    print(f"{description} the number of {number} = {result}")


Problem 3. Write a Python program to sort a list of tuples using Lambda.
Original list of tuples:
[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]
Sorting the List of Tuples:
[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]

solution

# Original list of tuples
tuples_list = [
    ('English', 88),
    ('Science', 90),
    ('Maths', 97),
    ('Social sciences', 82)
]

# Sorting the list of tuples based on the second element using a lambda function
sorted_list = sorted(tuples_list, key=lambda x: x[1])

# Print the sorted list
print("Sorting the List of Tuples:")
print(sorted_list)


Problem 4. Write a Python program to sort a list of dictionaries using Lambda.
Original list of dictionaries :
[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Mi Max', 'model': '2', 'color': 'Gold'},
{'make': 'Samsung', 'model': 7, 'color': 'Blue'}]
Sorting the List of dictionaries :
[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'},
{'make': 'Mi Max', 'model': '2', 'color': 'Gold'}]

solution
# Original list of dictionaries
list_of_dicts = [
    {'make': 'Nokia', 'model': 216, 'color': 'Black'},
    {'make': 'Mi Max', 'model': '2', 'color': 'Gold'},
    {'make': 'Samsung', 'model': 7, 'color': 'Blue'}
]

# Sorting the list of dictionaries based on the 'model' key in descending order
# Convert model to integer if it is a string, otherwise use as is
sorted_list_desc = sorted(list_of_dicts, key=lambda x: int(x['model']) if isinstance(x['model'], str) and x['model'].isdigit() else x['model'], reverse=True)

# Print the sorted list
print("Sorting the List of Dictionaries in Descending Order:")
print(sorted_list_desc)


Problem 5. Write a Python program to filter a list of integers using Lambda.
Original list of integers:
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Even numbers from the said list:
[2, 4, 6, 8, 10]
Odd numbers from the said list:
[1, 3, 5, 7, 9]

Solution

# Original list of integers
list_of_integers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Filtering even numbers
even_numbers = list(filter(lambda x: x % 2 == 0, list_of_integers))

# Filtering odd numbers
odd_numbers = list(filter(lambda x: x % 2 != 0, list_of_integers))

# Print the results
print("Original list of integers:")
print(list_of_integers)

print("Even numbers from the said list:")
print(even_numbers)

print("Odd numbers from the said list:")
print(odd_numbers)


Problem 6. Write a Python program to square and cube every number in a given list of integers using
Lambda.
Original list of integers:
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Square every number of the said list:
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

Cube every number of the said list:
[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]

Solution
# Original list of integers
list_of_integers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Squaring every number in the list
squared_numbers = list(map(lambda x: x ** 2, list_of_integers))

# Cubing every number in the list
cubed_numbers = list(map(lambda x: x ** 3, list_of_integers))

# Print the results
print("Original list of integers:")
print(list_of_integers)

print("Square every number of the said list:")
print(squared_numbers)

print("Cube every number of the said list:")
print(cubed_numbers)


Problem 7. Write a Python program to find if a given string starts with a given character using Lambda.
Sample Output:
True
False

solution
# Define the lambda function
starts_with = lambda string, char: string.startswith(char)

# Test cases
print(starts_with("hello", "h"))  # True
print(starts_with("world", "h"))  # False


Problem 8. Write a Python program to extract year, month, date and time using Lambda.
Sample Output:
2020-01-15 09:03:32.744178
2020
1
15
09:03:32.744178

solution 

from datetime import datetime

# Sample datetime object
date_time = datetime(2020, 1, 15, 9, 3, 32, 744178)

# Lambda functions to extract year, month, date, and time
extract_year = lambda dt: dt.year
extract_month = lambda dt: dt.month
extract_day = lambda dt: dt.day
extract_time = lambda dt: dt.time()

# Sample output
print(date_time)                           # 2020-01-15 09:03:32.744178
print(extract_year(date_time))             # 2020
print(extract_month(date_time))            # 1
print(extract_day(date_time))              # 15
print(extract_time(date_time))             # 09:03:32.744178


Problem 9. Write a Python program to check whether a given string is a number or not using Lambda.
Sample Output:
True
True
False
True
False
True
Print checking numbers:
True
True

solution
# Define the lambda function to check if the string is a number
is_number = lambda s: s.replace('.', '', 1).isdigit() if s.count('.') <= 1 else False

# Test cases
print(is_number("123"))      # True
print(is_number("123.45"))   # True
print(is_number("abc"))      # False
print(is_number("0.99"))     # True
print(is_number("12.34.56")) # False
print(is_number("-123"))     # True (if considering negatives as numbers)

# Additional numbers to check
test_strings = ["456", "78.9"]

print("Print checking numbers:")
for string in test_strings:
    print(is_number(string))  # True, True


Problem 10. Write a Python program to create Fibonacci series up to n using Lambda.
Fibonacci series upto 2:
[0, 1]
Fibonacci series upto 5:
[0, 1, 1, 2, 3]
Fibonacci series upto 6:
[0, 1, 1, 2, 3, 5]
Fibonacci series upto 9:
[0, 1, 1, 2, 3, 5, 8, 13, 21]

Solution 

from functools import reduce

# Lambda function to generate Fibonacci series up to n
fibonacci_series = lambda n: reduce(lambda x, _: x + [x[-1] + x[-2]], range(n-2), [0, 1])[:n]

# Test cases
print("Fibonacci series up to 2:")
print(fibonacci_series(2))  # [0, 1]

print("Fibonacci series up to 5:")
print(fibonacci_series(5))  # [0, 1, 1, 2, 3]

print("Fibonacci series up to 6:")
print(fibonacci_series(6))  # [0, 1, 1, 2, 3, 5]

print("Fibonacci series up to 9:")
print(fibonacci_series(9))  # [0, 1, 1, 2, 3, 5, 8, 13, 21]

